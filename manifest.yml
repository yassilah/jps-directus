type: install
name: Docker Compose from GitHub
tooltip: Install Docker Compose from GitHub repository.

settings: 
  fields:  
  - caption: GitHub Repository
    type: string
    name: repo
    placeholder: username/repo
    required: true
    regex: ^[a-zA-Z0-9-]+/[a-zA-Z0-9-]+$
  - caption: GitHub Branch
    type: string
    name: branch
    default: main
  - caption: Access Token
    type: string
    name: token
    inputType: password
  - type: spacer
  - caption: Docker Compose
    type: string
    name: compose
    default: docker-compose.yaml
    required: true
  - caption: Deploy script
    type: string
    name: deploy
    default: deploy.sh
    required: true
  - caption: Environment Variables
    type: text
    name: env
    required: false
  - type: spacer
  - caption: NGINX
    type: toggle
    name: nginx
    default: true
    required: false
    tooltip: "Automatically generate NGINX configuration."
    showIf: 
      true:
      - caption: NGINX Mapping
        type: text
        name: domains
        tooltip: "Port <-> Domain mapping: 'domain:port'."
      - caption: DNS Recods (Infomaniak)
        type: toggle
        name: dns
        default: true
        required: false
        tooltip: "Automatically add DNS records."
        showIf:
          true:
          - caption: DNS Token
            type: string
            name: dnsToken
            inputType: password
            required: true
      - caption: Let's Encrypt
        type: toggle
        name: letsEncrypt
        tooltip: "Automatically generate SSL certificates."
        default: true
        showIf:
          true:
          - caption: Email
            type: string
            name: letsEncryptEmail
            tooltip: "Email for Let's Encrypt notifications."
            default: contact@apenhet.com
            required: false
  
nodes:
- count: 1
  cloudlets: 32
  nodeType: ubuntu22
  nodeGroup: cp
  displayName: Application
  extip: true
  env:
    JELASTIC_PORTS: 80,443,9000

skipNodeEmails: true
    
onInstall:
  - if (${settings.dns}): addDNSRecords
  - cloneRepo
  - createEnvFile
  - installWebhook
  - installDocker
  - if (${settings.nginx}): installNginx
  - if (${settings.letsEncrypt}): installLetsEncrypt

actions: 
  cloneRepo:
   cmd[${nodes.cp.master.id}]: |-
      # Install GitHub
      sudo apt-get --assume-yes install git

      # Clone the repository
      if [ -n "${settings.token}" ]; then
          git clone -b ${settings.branch} https://${settings.token}@github.com/${settings.repo}.git /home/jelastic/app
      else
          git clone -b ${settings.branch} https://github.com/${settings.repo}.git /home/jelastic/app
      fi

  createEnvFile:
   cmd[${nodes.cp.master.id}]: |-
      if [ -n "${settings.env}" ]; then
          echo "${settings.env}" > /home/jelastic/app/.env
      fi

  installDocker:
   cmd[${nodes.cp.master.id}]: |- 
      # Add Docker's official GPG key:
      sudo apt-get update
      sudo apt-get --assume-yes install ca-certificates curl
      sudo install -m 0755 -d /etc/apt/keyrings
      sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      sudo chmod a+r /etc/apt/keyrings/docker.asc

      # Add the repository to Apt sources:
      echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get --assume-yes update

      # Install Docker
      sudo apt-get --assume-yes install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      # Start Docker
      sudo systemctl start docker

      # If deploy script then run it
      if [ -f /home/jelastic/app/${settings.deploy} ]; then
          sudo chmod +x /home/jelastic/app/${settings.deploy}
          cd /home/jelastic/app
          bash ${settings.deploy}
      fi

      # Run docker compose 
      sudo docker compose -f /home/jelastic/app/${settings.compose} up -d

  addDNSRecords:
    cmd[${nodes.cp.master.id}]: |-
      LIST="${settings.domains}"
      
      IFS=$'\n' read -r -d '' -a DOMAINS <<< "$(echo "$LIST")"

      for DOMAIN in "${DOMAINS[@]}"; do
          IFS=':' read -r -a DOMAIN <<< "$DOMAIN"
          MAIN=$(echo "$DOMAIN" | rev | cut -d '.' -f 1-2 | rev)
          SUB=$(echo "$DOMAIN" | sed "s/\.$MAIN//")
          curl -X POST \
          -H "Authorization: Bearer ${settings.dnsToken}" \
          -H "Content-Type: application/json" \
          -d '{
              "target": "'${nodes.cp.master.extips[0]}'",
              "ttl": "3600",
              "type": "A",
              "source": "'$SUB'"
          }' \
          https://api.infomaniak.com/2/zones/$MAIN/records
      done
  
  installWebhook:
   cmd[${nodes.cp.master.id}]: |-
      # Create a webhook on GitHub
      curl -X POST -H "Authorization: Bearer ${settings.token}" -H "Accept: application/vnd.github+json" https://api.github.com/repos/${settings.repo}/hooks -d '{"name": "web", "active": true, "events": ["push"], "config": {"url": "http://${nodes.cp.master.extips[0]}:9000/hooks/github", "content_type": "json"}}'

      # Install webhook
      sudo apt-get install --assume-yes webhook

      # Create a hooks.json file
      cat > /home/jelastic/hooks.json <<EOF
      [
        {
          "id": "github",
          "execute-command": "/home/jelastic/app/${settings.deploy}",
          "command-working-directory": "/home/jelastic/app",
          "response-message": "Redeploying...",
          "trigger-rule": {
            "match": { 
            "value": "refs/heads/${settings.branch}", 
            "type": "value", 
            "parameter": {
              "source": "payload",
              "name": "ref"
            }
          }
        }
      ]
      EOF

      # Ensure deploy script is executable
      chmod +x /home/jelastic/app/${settings.deploy}

      # Create webhook service
      cat > /etc/systemd/system/webhook.service <<EOF
      [Unit]
      Description=webhook

      [Service]
      ExecStart=webhook -hooks /home/jelastic/hooks.json -verbose
      Restart=always

      [Install]
      WantedBy=multi-user.target
      EOF

      # Reload systemd
      sudo systemctl daemon-reload

      # Start webhook service
      sudo systemctl start webhook

      # Enable webhook service
      sudo systemctl enable webhook

  installNginx:
   cmd[${nodes.cp.master.id}]: |-
      # Install nginx
      sudo apt-get --assume-yes install nginx

      # Create a server block for each domain
      LIST="${settings.domains}"

      IFS=$'\n' read -r -d '' -a DOMAINS <<< "$(echo -e "$LIST")"

      for DOMAIN in "${DOMAINS[@]}"; do
          IFS=':' read -r -a DOMAIN <<< "$DOMAIN"

          cat > /etc/nginx/sites-available/${DOMAIN[0]}.conf <<EOF
      server {
          listen 80;
          server_name ${DOMAIN[0]};

          location / {
              proxy_pass http://localhost:${DOMAIN[1]};
              proxy_http_version 1.1;
              proxy_set_header Upgrade \$http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host \$host;
              proxy_cache_bypass \$http_upgrade;
          }
      }
      EOF

          ln -s /etc/nginx/sites-available/${DOMAIN[0]}.conf /etc/nginx/sites-enabled/${DOMAIN[0]}.conf
      done

      # Restart nginx
      sudo systemctl restart nginx

      # Enable nginx
      sudo systemctl enable nginx

  installLetsEncrypt:
   cmd[${nodes.cp.master.id}]: |-
      # Install Let's Encrypt
      sudo apt --assume-yes install certbot python3-certbot-nginx

      # Get the list of domains from nginx in /etc/nginx/sites-enabled/ 
      LIST=$(ls -p /etc/nginx/sites-enabled/*.conf | xargs -n 1 basename | tr '\n' ',' | sed 's/\.conf//g' | sed 's/,$//g') \

      # Install SSL certificates for each domain
      sudo certbot --nginx -d $LIST -n --agree-tos -m ${settings.letsEncryptEmail} --redirect

      # Restart nginx
      sudo systemctl restart nginx